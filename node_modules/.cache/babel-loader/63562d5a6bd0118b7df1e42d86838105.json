{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steve\\\\git\\\\controlpad\\\\src\\\\components\\\\CPToggle.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { IonItem, IonToggle, IonLabel } from '@ionic/react';\nimport { AppContext } from '../State.jsx';\n/**\r\n\tUI component providing a UI control with two state values - 0 or 1.\r\n\tProps:\r\n\t\t* id:\t\t  Mnemonic used to refer the toggle control.\r\n\t\t* labelLeft:  (Optional) Text displayed to the left of the toggle.\r\n\t\t* labelLeft:  (Optional) Text displayed to the right of the toggle.\r\n\tState:\r\n\t\t* value:\t  Toggle state, either 0 (off) or 1 (on)\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CPToggle(props) {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const value = state.controls[props.id].value;\n  const styleItem = {\n    \"display\": \"inline-block\",\n    \"width\": \"fit-content\"\n  };\n  const styleLabelLeft = props.labelLeft ? {} : {\n    \"display\": \"none\"\n  };\n  const styleToggle = {\n    \"width\": \"40px\"\n  };\n  const styleLabelRight = props.labelRight ? {\n    \"margin-left\": \"0px\"\n  } : {\n    \"display\": \"none\"\n  }; // Create a callback function that dispatches a command indicating the toggle was clicked.\n\n  const clickHandler = checked => {\n    dispatch({\n      id: props.id,\n      fields: {\n        value: checked ? 1 : 0\n      },\n      updateServer: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonItem, {\n    lines: \"none\",\n    style: styleItem,\n    children: [/*#__PURE__*/_jsxDEV(IonLabel, {\n      style: styleLabelLeft,\n      children: props.labelLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(IonToggle, {\n      checked: value == 1,\n      onIonChange: e => clickHandler(e.detail.checked),\n      style: styleToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(IonLabel, {\n      slot: \"end\",\n      style: styleLabelRight,\n      children: props.labelRight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this);\n}\n\n_s(CPToggle, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");\n\n_c = CPToggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPToggle\");","map":{"version":3,"names":["React","useContext","IonItem","IonToggle","IonLabel","AppContext","CPToggle","props","state","dispatch","value","controls","id","styleItem","styleLabelLeft","labelLeft","styleToggle","styleLabelRight","labelRight","clickHandler","checked","fields","updateServer","e","detail"],"sources":["C:/Users/steve/git/controlpad/src/components/CPToggle.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { IonItem, IonToggle, IonLabel } from '@ionic/react';\r\nimport { AppContext} from '../State.jsx';\r\n\r\n/**\r\n\tUI component providing a UI control with two state values - 0 or 1.\r\n\tProps:\r\n\t\t* id:\t\t  Mnemonic used to refer the toggle control.\r\n\t\t* labelLeft:  (Optional) Text displayed to the left of the toggle.\r\n\t\t* labelLeft:  (Optional) Text displayed to the right of the toggle.\r\n\tState:\r\n\t\t* value:\t  Toggle state, either 0 (off) or 1 (on)\r\n*/\r\nexport function CPToggle(props) {\r\n\r\n\tconst { state, dispatch } = useContext(AppContext);\r\n\tconst value = state.controls[props.id].value;\r\n\t\r\n\tconst styleItem = { \"display\": \"inline-block\", \"width\": \"fit-content\" };\r\n\tconst styleLabelLeft = props.labelLeft ? {} : { \"display\": \"none\" };\r\n\tconst styleToggle = { \"width\": \"40px\" };\r\n\tconst styleLabelRight = props.labelRight ? { \"margin-left\": \"0px\" } : { \"display\": \"none\" };\r\n\r\n\t// Create a callback function that dispatches a command indicating the toggle was clicked.\r\n\tconst clickHandler = (checked) => {\r\n\t\tdispatch({ id: props.id, fields: {value: checked ? 1 : 0}, updateServer: true });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<IonItem lines=\"none\" style={styleItem}>\r\n\t\t\t<IonLabel style={styleLabelLeft}>{props.labelLeft}</IonLabel>\r\n\t\t\t<IonToggle checked={value == 1} onIonChange={e => clickHandler(e.detail.checked)} style={styleToggle} />\r\n\t\t\t<IonLabel slot=\"end\" style={styleLabelRight}>{props.labelRight}</IonLabel>\r\n\t\t</IonItem>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA6C,cAA7C;AACA,SAASC,UAAT,QAA0B,cAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EAE/B,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBR,UAAU,CAACI,UAAD,CAAtC;EACA,MAAMK,KAAK,GAAGF,KAAK,CAACG,QAAN,CAAeJ,KAAK,CAACK,EAArB,EAAyBF,KAAvC;EAEA,MAAMG,SAAS,GAAG;IAAE,WAAW,cAAb;IAA6B,SAAS;EAAtC,CAAlB;EACA,MAAMC,cAAc,GAAGP,KAAK,CAACQ,SAAN,GAAkB,EAAlB,GAAuB;IAAE,WAAW;EAAb,CAA9C;EACA,MAAMC,WAAW,GAAG;IAAE,SAAS;EAAX,CAApB;EACA,MAAMC,eAAe,GAAGV,KAAK,CAACW,UAAN,GAAmB;IAAE,eAAe;EAAjB,CAAnB,GAA8C;IAAE,WAAW;EAAb,CAAtE,CAR+B,CAU/B;;EACA,MAAMC,YAAY,GAAIC,OAAD,IAAa;IACjCX,QAAQ,CAAC;MAAEG,EAAE,EAAEL,KAAK,CAACK,EAAZ;MAAgBS,MAAM,EAAE;QAACX,KAAK,EAAEU,OAAO,GAAG,CAAH,GAAO;MAAtB,CAAxB;MAAkDE,YAAY,EAAE;IAAhE,CAAD,CAAR;EACA,CAFD;;EAIA,oBACC,QAAC,OAAD;IAAS,KAAK,EAAC,MAAf;IAAsB,KAAK,EAAET,SAA7B;IAAA,wBACC,QAAC,QAAD;MAAU,KAAK,EAAEC,cAAjB;MAAA,UAAkCP,KAAK,CAACQ;IAAxC;MAAA;MAAA;MAAA;IAAA,QADD,eAEC,QAAC,SAAD;MAAW,OAAO,EAAEL,KAAK,IAAI,CAA7B;MAAgC,WAAW,EAAEa,CAAC,IAAIJ,YAAY,CAACI,CAAC,CAACC,MAAF,CAASJ,OAAV,CAA9D;MAAkF,KAAK,EAAEJ;IAAzF;MAAA;MAAA;MAAA;IAAA,QAFD,eAGC,QAAC,QAAD;MAAU,IAAI,EAAC,KAAf;MAAqB,KAAK,EAAEC,eAA5B;MAAA,UAA8CV,KAAK,CAACW;IAApD;MAAA;MAAA;MAAA;IAAA,QAHD;EAAA;IAAA;IAAA;IAAA;EAAA,QADD;AAOA;;GAtBeZ,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}