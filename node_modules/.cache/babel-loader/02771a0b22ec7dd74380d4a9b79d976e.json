{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steve\\\\git\\\\controlpad\\\\src\\\\components\\\\CPMotor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { IonRange, IonLabel } from '@ionic/react';\nimport { AppContext } from '../State.jsx';\n/**\r\n\tUI component for controlling a motor's speed and direction.\r\n\tProps:\r\n\t\t* id:\t\t\t\tMnemonic used to refer the motor control.\r\n\t\t* unidirectional:\t(Optional) When true motor is commanded to spin in a forward direction only.\r\n\t\t* showMotorStatus:\t(Optional) When true slider channel is colored green when motor is quiesent, red when motor is spinning.\r\n\t\t\t\t\t\t\tOtherwise slider channel is colored grey.\r\n\tState:\r\n\t\t* speed:\tNumber between 0 to 127 indicating how fast the motor should spin (0 = off; 127 = full speed).\r\n\t\t* forward:\tTrue if the motor should spin in a forward direction; false if the motor should spin backwards.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CPMotor(props) {\n  _s();\n\n  const showMotorStatus = props.showMotorStatus;\n  const rangeMinValue = props.unidirectional == \"true\" ? 0 : -127;\n  const rangeMaxValue = 127;\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const forward = state.controls[props.id].forward;\n  const speed = forward ? state.controls[props.id].speed : -state.controls[props.id].speed;\n  const styledIonRangeDefault = {\n    \"--bar-height\": \"8px\",\n    \"--bar-border-radius\": \"8px\",\n    \"--bar-background\": \"#e8e8e8\",\n    \"--bar-background-active\": \"#e8e8e8\",\n    \"--knob-background\": \"darkblue\",\n    \"--knob-size\": \"30px\",\n    \"--pin-background\": \"#ffafcc\",\n    \"--pin-color\": \"#fff\"\n  };\n  const styledIonRangeGreen = { ...styledIonRangeDefault,\n    \"--bar-background\": \"#adebad\",\n    \"--bar-background-active\": \"#adebad\"\n  };\n  const styledIonRangeRed = { ...styledIonRangeDefault,\n    \"--bar-background\": \"#ff8080\",\n    \"--bar-background-active\": \"#ff8080\"\n  };\n  const ionRangeStyle = showMotorStatus ? speed == 0 ? styledIonRangeGreen : styledIonRangeRed : styledIonRangeDefault; // Create a callback function that dispatches a command to update the motor's speed.\n\n  const setMotorSpeed = speed => {\n    const forward = speed >= 0;\n    dispatch({\n      id: props.id,\n      fields: {\n        speed: Math.abs(speed),\n        forward: forward\n      },\n      updateServer: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonRange, {\n    style: ionRangeStyle,\n    min: rangeMinValue,\n    max: rangeMaxValue,\n    debounce: 100,\n    value: speed,\n    onIonChange: e => setMotorSpeed(e.detail.value),\n    children: /*#__PURE__*/_jsxDEV(IonLabel, {\n      slot: \"start\",\n      children: props.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 3\n  }, this);\n}\n\n_s(CPMotor, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");\n\n_c = CPMotor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPMotor\");","map":{"version":3,"names":["React","useContext","IonRange","IonLabel","AppContext","CPMotor","props","showMotorStatus","rangeMinValue","unidirectional","rangeMaxValue","state","dispatch","forward","controls","id","speed","styledIonRangeDefault","styledIonRangeGreen","styledIonRangeRed","ionRangeStyle","setMotorSpeed","fields","Math","abs","updateServer","e","detail","value"],"sources":["C:/Users/steve/git/controlpad/src/components/CPMotor.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { IonRange, IonLabel } from '@ionic/react';\r\nimport { AppContext} from '../State.jsx';\r\n\r\n/**\r\n\tUI component for controlling a motor's speed and direction.\r\n\tProps:\r\n\t\t* id:\t\t\t\tMnemonic used to refer the motor control.\r\n\t\t* unidirectional:\t(Optional) When true motor is commanded to spin in a forward direction only.\r\n\t\t* showMotorStatus:\t(Optional) When true slider channel is colored green when motor is quiesent, red when motor is spinning.\r\n\t\t\t\t\t\t\tOtherwise slider channel is colored grey.\r\n\tState:\r\n\t\t* speed:\tNumber between 0 to 127 indicating how fast the motor should spin (0 = off; 127 = full speed).\r\n\t\t* forward:\tTrue if the motor should spin in a forward direction; false if the motor should spin backwards.\r\n */\r\nexport function CPMotor(props) {\r\n\r\n\tconst showMotorStatus = props.showMotorStatus;\r\n\tconst rangeMinValue = props.unidirectional == \"true\" ? 0 : -127;\r\n\tconst rangeMaxValue = 127;\r\n\r\n\tconst { state, dispatch } = useContext(AppContext);\r\n\tconst forward = state.controls[props.id].forward;\r\n\tconst speed = forward ? state.controls[props.id].speed : -state.controls[props.id].speed;\r\n\r\n\tconst styledIonRangeDefault = {\r\n\t\t\"--bar-height\": \"8px\",\r\n\t\t\"--bar-border-radius\": \"8px\",\r\n\t\t\"--bar-background\": \"#e8e8e8\",\r\n\t\t\"--bar-background-active\": \"#e8e8e8\",\r\n\t\t\"--knob-background\": \"darkblue\",\r\n\t\t\"--knob-size\": \"30px\",\r\n\t\t\"--pin-background\": \"#ffafcc\",\r\n\t\t\"--pin-color\": \"#fff\"\r\n\t};\r\n\tconst styledIonRangeGreen = { ...styledIonRangeDefault, \"--bar-background\": \"#adebad\", \"--bar-background-active\": \"#adebad\" };\r\n\tconst styledIonRangeRed = { ...styledIonRangeDefault, \"--bar-background\": \"#ff8080\", \"--bar-background-active\": \"#ff8080\" };\r\n\tconst ionRangeStyle = showMotorStatus ? speed == 0 ? styledIonRangeGreen : styledIonRangeRed : styledIonRangeDefault;\r\n\r\n\t// Create a callback function that dispatches a command to update the motor's speed.\r\n\tconst setMotorSpeed = (speed) => {\r\n\t\tconst forward = speed >= 0;\r\n\t\tdispatch({ id: props.id, fields: { speed: Math.abs(speed), forward: forward }, updateServer: true });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<IonRange style={ionRangeStyle} min={rangeMinValue} max={rangeMaxValue} debounce={100} value={speed} onIonChange={e => setMotorSpeed(e.detail.value)}>\r\n\t\t\t<IonLabel slot=\"start\">{props.id}</IonLabel>\r\n\t\t</IonRange>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,cAAnC;AACA,SAASC,UAAT,QAA0B,cAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EAAA;;EAE9B,MAAMC,eAAe,GAAGD,KAAK,CAACC,eAA9B;EACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,cAAN,IAAwB,MAAxB,GAAiC,CAAjC,GAAqC,CAAC,GAA5D;EACA,MAAMC,aAAa,GAAG,GAAtB;EAEA,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBX,UAAU,CAACG,UAAD,CAAtC;EACA,MAAMS,OAAO,GAAGF,KAAK,CAACG,QAAN,CAAeR,KAAK,CAACS,EAArB,EAAyBF,OAAzC;EACA,MAAMG,KAAK,GAAGH,OAAO,GAAGF,KAAK,CAACG,QAAN,CAAeR,KAAK,CAACS,EAArB,EAAyBC,KAA5B,GAAoC,CAACL,KAAK,CAACG,QAAN,CAAeR,KAAK,CAACS,EAArB,EAAyBC,KAAnF;EAEA,MAAMC,qBAAqB,GAAG;IAC7B,gBAAgB,KADa;IAE7B,uBAAuB,KAFM;IAG7B,oBAAoB,SAHS;IAI7B,2BAA2B,SAJE;IAK7B,qBAAqB,UALQ;IAM7B,eAAe,MANc;IAO7B,oBAAoB,SAPS;IAQ7B,eAAe;EARc,CAA9B;EAUA,MAAMC,mBAAmB,GAAG,EAAE,GAAGD,qBAAL;IAA4B,oBAAoB,SAAhD;IAA2D,2BAA2B;EAAtF,CAA5B;EACA,MAAME,iBAAiB,GAAG,EAAE,GAAGF,qBAAL;IAA4B,oBAAoB,SAAhD;IAA2D,2BAA2B;EAAtF,CAA1B;EACA,MAAMG,aAAa,GAAGb,eAAe,GAAGS,KAAK,IAAI,CAAT,GAAaE,mBAAb,GAAmCC,iBAAtC,GAA0DF,qBAA/F,CAtB8B,CAwB9B;;EACA,MAAMI,aAAa,GAAIL,KAAD,IAAW;IAChC,MAAMH,OAAO,GAAGG,KAAK,IAAI,CAAzB;IACAJ,QAAQ,CAAC;MAAEG,EAAE,EAAET,KAAK,CAACS,EAAZ;MAAgBO,MAAM,EAAE;QAAEN,KAAK,EAAEO,IAAI,CAACC,GAAL,CAASR,KAAT,CAAT;QAA0BH,OAAO,EAAEA;MAAnC,CAAxB;MAAsEY,YAAY,EAAE;IAApF,CAAD,CAAR;EACA,CAHD;;EAKA,oBACC,QAAC,QAAD;IAAU,KAAK,EAAEL,aAAjB;IAAgC,GAAG,EAAEZ,aAArC;IAAoD,GAAG,EAAEE,aAAzD;IAAwE,QAAQ,EAAE,GAAlF;IAAuF,KAAK,EAAEM,KAA9F;IAAqG,WAAW,EAAEU,CAAC,IAAIL,aAAa,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAApI;IAAA,uBACC,QAAC,QAAD;MAAU,IAAI,EAAC,OAAf;MAAA,UAAwBtB,KAAK,CAACS;IAA9B;MAAA;MAAA;MAAA;IAAA;EADD;IAAA;IAAA;IAAA;EAAA,QADD;AAKA;;GAnCeV,O;;KAAAA,O"},"metadata":{},"sourceType":"module"}