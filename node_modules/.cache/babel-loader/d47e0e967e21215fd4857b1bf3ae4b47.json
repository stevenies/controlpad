{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, readTask, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { a as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index8.js';\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nconst InfiniteScroll = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n\n    this.position = 'bottom';\n\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n\n      const infiniteHeight = this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      } else {\n        this.didFire = false;\n      }\n\n      return 4;\n    };\n  }\n\n  thresholdChanged() {\n    const val = this.threshold;\n\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    } else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n\n  disabledChanged() {\n    const disabled = this.disabled;\n\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n\n    this.enableScrollEvents(!disabled);\n  }\n\n  async connectedCallback() {\n    const contentEl = findClosestIonContent(this.el);\n\n    if (!contentEl) {\n      printIonContentErrorMsg(this.el);\n      return;\n    }\n\n    this.scrollEl = await getScrollElement(contentEl);\n    this.thresholdChanged();\n    this.disabledChanged();\n\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n\n\n  async complete() {\n    const scrollEl = this.scrollEl;\n\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n\n    this.isLoading = false;\n\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true; // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n          const newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      } else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      }\n    });\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get watchers() {\n    return {\n      \"threshold\": [\"thresholdChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n  static get style() {\n    return infiniteScrollCss;\n  }\n\n}, [0, \"ion-infinite-scroll\", {\n  \"threshold\": [1],\n  \"disabled\": [4],\n  \"position\": [1],\n  \"isLoading\": [32],\n  \"complete\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-infinite-scroll\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-infinite-scroll\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, InfiniteScroll);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonInfiniteScroll = InfiniteScroll;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonInfiniteScroll, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","readTask","h","Host","b","getIonMode","a","findClosestIonContent","p","printIonContentErrorMsg","g","getScrollElement","infiniteScrollCss","InfiniteScroll","constructor","__registerHost","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","clientHeight","disconnectedCallback","undefined","complete","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","watchers","style","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonInfiniteScroll","defineCustomElement"],"sources":["C:/Users/steve/git/controlpad/node_modules/@ionic/core/components/ion-infinite-scroll.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, readTask, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { a as findClosestIonContent, p as printIonContentErrorMsg, g as getScrollElement } from './index8.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\n     * The threshold distance from the bottom\n     * of the content to call the `infinite` output event when scrolled.\n     * The threshold value can be either a percent, or\n     * in pixels. For example, use the value of `10%` for the `infinite`\n     * output event to get called when the user has scrolled 10%\n     * from the bottom of the page. Use the value `100px` when the\n     * scroll is within 100 pixels from the bottom of the page.\n     */\n    this.threshold = '15%';\n    /**\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\n     * will be removed.\n     *\n     * Set this to true to disable the infinite scroll from actively\n     * trying to receive new data while scrolling. This is useful\n     * when it is known that there is no more data that can be added, and\n     * the infinite scroll is no longer needed.\n     */\n    this.disabled = false;\n    /**\n     * The position of the infinite scroll element.\n     * The value can be either `top` or `bottom`.\n     */\n    this.position = 'bottom';\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n      const infiniteHeight = this.el.offsetHeight;\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom'\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n        : scrollTop - infiniteHeight - threshold;\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      }\n      else {\n        this.didFire = false;\n      }\n      return 4;\n    };\n  }\n  thresholdChanged() {\n    const val = this.threshold;\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    }\n    else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n  disabledChanged() {\n    const disabled = this.disabled;\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n    this.enableScrollEvents(!disabled);\n  }\n  async connectedCallback() {\n    const contentEl = findClosestIonContent(this.el);\n    if (!contentEl) {\n      printIonContentErrorMsg(this.el);\n      return;\n    }\n    this.scrollEl = await getScrollElement(contentEl);\n    this.thresholdChanged();\n    this.disabledChanged();\n    if (this.position === 'top') {\n      writeTask(() => {\n        if (this.scrollEl) {\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n        }\n      });\n    }\n  }\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\n   * Call `complete()` within the `ionInfinite` output event handler when\n   * your async operation has completed. For example, the `loading`\n   * state is while the app is performing an asynchronous operation,\n   * such as receiving more data from an AJAX request to add more items\n   * to a data list. Once the data has been received and UI updated, you\n   * then call this method to signify that the loading has completed.\n   * This method will change the infinite scroll's state from `loading`\n   * to `enabled`.\n   */\n  async complete() {\n    const scrollEl = this.scrollEl;\n    if (!this.isLoading || !scrollEl) {\n      return;\n    }\n    this.isLoading = false;\n    if (this.position === 'top') {\n      /**\n       * New content is being added at the top, but the scrollTop position stays the same,\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n       * (Frame 1)\n       *    - complete() is called, but the UI hasn't had time to update yet.\n       *    - Save the current content dimensions.\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\n       * (Frame 2)\n       *    - Read the new content dimensions.\n       *    - Calculate the height difference and the new scroll position.\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n       * (Still frame 2, if I'm correct)\n       *    - Change the scroll position (= visually maintain the scroll position).\n       *    - Change the state to re-enable the InfiniteScroll.\n       *    - This should be after changing the scroll position, or it could\n       *    cause the InfiniteScroll to be triggered again immediately.\n       * (Frame 3)\n       *    Done.\n       */\n      this.isBusy = true;\n      // ******** DOM READ ****************\n      // Save the current content dimensions before the UI updates\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n      // ******** DOM READ ****************\n      requestAnimationFrame(() => {\n        readTask(() => {\n          // UI has updated, save the new content dimensions\n          const scrollHeight = scrollEl.scrollHeight;\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n          const newScrollTop = scrollHeight - prev;\n          // ******** DOM WRITE ****************\n          requestAnimationFrame(() => {\n            writeTask(() => {\n              scrollEl.scrollTop = newScrollTop;\n              this.isBusy = false;\n            });\n          });\n        });\n      });\n    }\n  }\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      }\n      else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return (h(Host, { class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled,\n      } }));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"threshold\": [\"thresholdChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return infiniteScrollCss; }\n}, [0, \"ion-infinite-scroll\", {\n    \"threshold\": [1],\n    \"disabled\": [4],\n    \"position\": [1],\n    \"isLoading\": [32],\n    \"complete\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-infinite-scroll\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-infinite-scroll\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, InfiniteScroll);\n      }\n      break;\n  } });\n}\n\nconst IonInfiniteScroll = InfiniteScroll;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonInfiniteScroll, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}