{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steve\\\\git\\\\controlpad\\\\src\\\\components\\\\CPButton.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { IonButton } from '@ionic/react';\nimport { AppContext } from '../State.jsx';\n/**\r\n\tUI component providing a clickable UI button without any state of its own.\r\n\tProps:\r\n\t\t* id:\t  Mnemonic used to refer the button control.\r\n\tState:\r\n\t\t* label:  Text displayed as a label within the button.\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CPButton(props) {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const label = state.controls[props.id].label; // Create a callback function that dispatches a command indicating the button was clicked.\n\n  const clickHandler = () => {\n    dispatch({\n      id: props.id,\n      fields: {},\n      updateServer: true\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(IonButton, {\n    onClick: () => clickHandler(),\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 4\n  }, this);\n}\n\n_s(CPButton, \"QMdo+h1+fLbTriZQ0QN6uukzyow=\");\n\n_c = CPButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"CPButton\");","map":{"version":3,"names":["React","useContext","IonButton","AppContext","CPButton","props","state","dispatch","label","controls","id","clickHandler","fields","updateServer"],"sources":["C:/Users/steve/git/controlpad/src/components/CPButton.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { IonButton } from '@ionic/react';\r\nimport { AppContext} from '../State.jsx';\r\n\r\n/**\r\n\tUI component providing a clickable UI button without any state of its own.\r\n\tProps:\r\n\t\t* id:\t  Mnemonic used to refer the button control.\r\n\tState:\r\n\t\t* label:  Text displayed as a label within the button.\r\n*/\r\nexport function CPButton(props) {\r\n\r\n\tconst { state, dispatch } = useContext(AppContext);\r\n\tconst label = state.controls[props.id].label;\r\n\r\n\t// Create a callback function that dispatches a command indicating the button was clicked.\r\n\tconst clickHandler = () => {\r\n\t\tdispatch({ id: props.id, fields: {}, updateServer: true });\r\n\t};\r\n\r\n\treturn (\r\n \t\t<IonButton onClick={() => clickHandler()}>{label}</IonButton>\r\n    );\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA0B,cAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAAA;;EAE/B,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAsBN,UAAU,CAACE,UAAD,CAAtC;EACA,MAAMK,KAAK,GAAGF,KAAK,CAACG,QAAN,CAAeJ,KAAK,CAACK,EAArB,EAAyBF,KAAvC,CAH+B,CAK/B;;EACA,MAAMG,YAAY,GAAG,MAAM;IAC1BJ,QAAQ,CAAC;MAAEG,EAAE,EAAEL,KAAK,CAACK,EAAZ;MAAgBE,MAAM,EAAE,EAAxB;MAA4BC,YAAY,EAAE;IAA1C,CAAD,CAAR;EACA,CAFD;;EAIA,oBACE,QAAC,SAAD;IAAW,OAAO,EAAE,MAAMF,YAAY,EAAtC;IAAA,UAA2CH;EAA3C;IAAA;IAAA;IAAA;EAAA,QADF;AAGA;;GAbeJ,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}