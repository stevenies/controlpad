{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nvar stompClient = null; // Activate a STOMP network connection to the ControlPad server.\n\nexport function connectServer(serverNetworkDomain, dispatch) {\n  try {\n    // Create the STOMP network client\n    const serverUrl = 'ws://' + serverNetworkDomain + ':8080/controlPadServer/websocket';\n    stompClient = new Client({\n      brokerURL: serverUrl,\n      debug: function (str) {\n        console.log(str);\n      },\n      reconnectDelay: 5000,\n      heartbeatIncoming: 4000,\n      heartbeatOutgoing: 4000\n    }); // Establish a callback function that dispatches state update messages sent by the server.\n    // An example message received from the server is:\n    //   { @class:\"org.smn.controlpad.model.state.MotorState\", id: \"m1\", speed: 20, forward: true }\n    // An example of the command generated from the message is:\n    //   { id: \"m1\", fields: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", id: \"m1\", speed: 20, forward: true }, updateServer: false }\n\n    stompClient.onConnect = function (frame) {\n      console.log('ControlPad connected: ' + frame);\n      stompClient.subscribe('/client/doMessage', function (message) {\n        console.log(\"Dispatching message from server: \" + message.body);\n        const control = JSON.parse(message.body).control;\n        const command = {\n          id: control.id,\n          fields: { ...control\n          },\n          updateServer: false\n        };\n        dispatch(command);\n      });\n    }; // Establish a callback function that logs STOMP errors\n\n\n    stompClient.onStompError = function (frame) {\n      // Will be invoked in case of error encountered by Broker\n      // Bad login/passcode typically will cause an error\n      // Compliant brokers will set `message` header with a brief message. Body may contain details.\n      // Compliant brokers will terminate the connection after any error\n      console.log('Broker reported error: ' + frame.headers['message']);\n      console.log('Additional details: ' + frame.body);\n    }; // Enable the STOMP client\n\n\n    stompClient.activate();\n  } catch (error) {\n    console.log(error);\n  }\n} // Dispatch a state update message to the server.  An example message is:\n//   { controlState: { @class: \"org.smn.controlpad.model.state.MotorState\", id: \"m1\", speed:20, forward: true } }\n//\n\nexport function doServerDispatch(message) {\n  const data = JSON.stringify(message);\n  console.log(\"Sending message to server: \" + data);\n\n  try {\n    stompClient.publish({\n      destination: '/server/doMessage',\n      body: data\n    });\n  } catch (e) {\n    console.log(\"Network error: \" + e);\n  }\n} // Deactivate the STOMP network connection.\n\nexport function disconnectServer() {\n  if (stompClient !== null) {\n    stompClient.deactivate();\n  }\n\n  console.log(\"ControlPad disconnected\");\n}","map":{"version":3,"names":["Client","stompClient","connectServer","serverNetworkDomain","dispatch","serverUrl","brokerURL","debug","str","console","log","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","onConnect","frame","subscribe","message","body","control","JSON","parse","command","id","fields","updateServer","onStompError","headers","activate","error","doServerDispatch","data","stringify","publish","destination","e","disconnectServer","deactivate"],"sources":["C:/Users/steve/git/controlpad/src/websockets.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\r\n\r\nvar stompClient = null;\r\n\r\n// Activate a STOMP network connection to the ControlPad server.\r\nexport function connectServer(serverNetworkDomain, dispatch) {\r\n\ttry {\r\n\t\t\r\n\t\t// Create the STOMP network client\r\n\t\tconst serverUrl = 'ws://' + serverNetworkDomain + ':8080/controlPadServer/websocket';\r\n\t\tstompClient = new Client({\r\n\t\t\tbrokerURL: serverUrl,\r\n\t\t\tdebug: function (str) {\r\n\t\t\t\tconsole.log(str);\r\n\t\t\t},\r\n\t\t\treconnectDelay: 5000,\r\n\t\t\theartbeatIncoming: 4000,\r\n\t\t\theartbeatOutgoing: 4000,\r\n\t\t});\r\n\t\t\r\n\t\t// Establish a callback function that dispatches state update messages sent by the server.\r\n\t\t// An example message received from the server is:\r\n\t\t//   { @class:\"org.smn.controlpad.model.state.MotorState\", id: \"m1\", speed: 20, forward: true }\r\n\t\t// An example of the command generated from the message is:\r\n\t\t//   { id: \"m1\", fields: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", id: \"m1\", speed: 20, forward: true }, updateServer: false }\r\n\t\tstompClient.onConnect = function (frame) {\r\n\t\t\tconsole.log('ControlPad connected: ' + frame);\r\n\t\t\tstompClient.subscribe('/client/doMessage', function (message) {\r\n\t\t\t\tconsole.log(\"Dispatching message from server: \" + message.body);\t\r\n\r\n\t\t\t\tconst control = JSON.parse(message.body).control;\r\n\t\t\t\tconst command = { id: control.id, fields: { ...control }, updateServer: false };\r\n\t\t\t\tdispatch(command);\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\t// Establish a callback function that logs STOMP errors\r\n\t\tstompClient.onStompError = function (frame) {\r\n\t\t\t// Will be invoked in case of error encountered by Broker\r\n\t\t\t// Bad login/passcode typically will cause an error\r\n\t\t\t// Compliant brokers will set `message` header with a brief message. Body may contain details.\r\n\t\t\t// Compliant brokers will terminate the connection after any error\r\n\t\t\tconsole.log('Broker reported error: ' + frame.headers['message']);\r\n\t\t\tconsole.log('Additional details: ' + frame.body);\r\n\t\t};\r\n\t\t\r\n\t\t// Enable the STOMP client\r\n\t\tstompClient.activate();\r\n\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n}\r\n\r\n// Dispatch a state update message to the server.  An example message is:\r\n//   { controlState: { @class: \"org.smn.controlpad.model.state.MotorState\", id: \"m1\", speed:20, forward: true } }\r\n//\r\nexport function doServerDispatch(message) {\r\n    const data = JSON.stringify(message);\r\n\tconsole.log(\"Sending message to server: \" + data);\r\n\ttry {\r\n\t\tstompClient.publish({ destination: '/server/doMessage', body: data });\r\n\t} catch (e) {\r\n\t\tconsole.log (\"Network error: \" + e);\r\n\t}\r\n}\r\n\r\n// Deactivate the STOMP network connection.\r\nexport function disconnectServer() {\r\n    if (stompClient !== null) {\r\n\t\tstompClient.deactivate();\r\n\t}\r\n\tconsole.log(\"ControlPad disconnected\");\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AAEA,IAAIC,WAAW,GAAG,IAAlB,C,CAEA;;AACA,OAAO,SAASC,aAAT,CAAuBC,mBAAvB,EAA4CC,QAA5C,EAAsD;EAC5D,IAAI;IAEH;IACA,MAAMC,SAAS,GAAG,UAAUF,mBAAV,GAAgC,kCAAlD;IACAF,WAAW,GAAG,IAAID,MAAJ,CAAW;MACxBM,SAAS,EAAED,SADa;MAExBE,KAAK,EAAE,UAAUC,GAAV,EAAe;QACrBC,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACA,CAJuB;MAKxBG,cAAc,EAAE,IALQ;MAMxBC,iBAAiB,EAAE,IANK;MAOxBC,iBAAiB,EAAE;IAPK,CAAX,CAAd,CAJG,CAcH;IACA;IACA;IACA;IACA;;IACAZ,WAAW,CAACa,SAAZ,GAAwB,UAAUC,KAAV,EAAiB;MACxCN,OAAO,CAACC,GAAR,CAAY,2BAA2BK,KAAvC;MACAd,WAAW,CAACe,SAAZ,CAAsB,mBAAtB,EAA2C,UAAUC,OAAV,EAAmB;QAC7DR,OAAO,CAACC,GAAR,CAAY,sCAAsCO,OAAO,CAACC,IAA1D;QAEA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,IAAnB,EAAyBC,OAAzC;QACA,MAAMG,OAAO,GAAG;UAAEC,EAAE,EAAEJ,OAAO,CAACI,EAAd;UAAkBC,MAAM,EAAE,EAAE,GAAGL;UAAL,CAA1B;UAA0CM,YAAY,EAAE;QAAxD,CAAhB;QACArB,QAAQ,CAACkB,OAAD,CAAR;MACA,CAND;IAOA,CATD,CAnBG,CA8BH;;;IACArB,WAAW,CAACyB,YAAZ,GAA2B,UAAUX,KAAV,EAAiB;MAC3C;MACA;MACA;MACA;MACAN,OAAO,CAACC,GAAR,CAAY,4BAA4BK,KAAK,CAACY,OAAN,CAAc,SAAd,CAAxC;MACAlB,OAAO,CAACC,GAAR,CAAY,yBAAyBK,KAAK,CAACG,IAA3C;IACA,CAPD,CA/BG,CAwCH;;;IACAjB,WAAW,CAAC2B,QAAZ;EAEA,CA3CD,CA2CE,OAAOC,KAAP,EAAc;IACfpB,OAAO,CAACC,GAAR,CAAYmB,KAAZ;EACA;AACD,C,CAED;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0Bb,OAA1B,EAAmC;EACtC,MAAMc,IAAI,GAAGX,IAAI,CAACY,SAAL,CAAef,OAAf,CAAb;EACHR,OAAO,CAACC,GAAR,CAAY,gCAAgCqB,IAA5C;;EACA,IAAI;IACH9B,WAAW,CAACgC,OAAZ,CAAoB;MAAEC,WAAW,EAAE,mBAAf;MAAoChB,IAAI,EAAEa;IAA1C,CAApB;EACA,CAFD,CAEE,OAAOI,CAAP,EAAU;IACX1B,OAAO,CAACC,GAAR,CAAa,oBAAoByB,CAAjC;EACA;AACD,C,CAED;;AACA,OAAO,SAASC,gBAAT,GAA4B;EAC/B,IAAInC,WAAW,KAAK,IAApB,EAA0B;IAC5BA,WAAW,CAACoC,UAAZ;EACA;;EACD5B,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA"},"metadata":{},"sourceType":"module"}