{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steve\\\\git\\\\controlpad\\\\src\\\\State.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { doServerDispatch } from './websockets.js'; // Initial values for the application's global state data structures.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  controls: {\n    stopMotors: {\n      \"@class\": \"org.smn.controlpad.model.control.CPButton\",\n      label: \"Stop Motors\"\n    },\n    m1: {\n      \"@class\": \"org.smn.controlpad.model.control.CPMotor\",\n      speed: 0,\n      forward: true\n    },\n    m2: {\n      \"@class\": \"org.smn.controlpad.model.control.CPMotor\",\n      speed: 0,\n      forward: true\n    },\n    m3: {\n      \"@class\": \"org.smn.controlpad.model.control.CPMotor\",\n      speed: 0,\n      forward: true\n    },\n    m4: {\n      \"@class\": \"org.smn.controlpad.model.control.CPMotor\",\n      speed: 0,\n      forward: true\n    },\n    m1RunningLight: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPLight\",\n      value: 0\n    },\n    m2RunningLight: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPLight\",\n      value: 0\n    },\n    m3RunningLight: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPLight\",\n      value: 0\n    },\n    m4RunningLight: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPLight\",\n      value: 0\n    },\n    toggle: {\n      \"@class\": \"org.smn.controlpad.model.control.CPToggle\",\n      value: 0\n    },\n    toggleLight: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPLight\",\n      value: 0\n    },\n    slider: {\n      \"@class\": \"org.smn.controlpad.model.control.CPSlider\",\n      value: 0\n    },\n    textEdit: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPTextField\",\n      value: \"Steve Nies\"\n    },\n    textDisplay: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPTextField\",\n      value: \"\"\n    },\n    multiTextEdit: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPTextField\",\n      value: \"Steve Nies, Sheri Nies\"\n    },\n    multiTextDisplay: {\n      \"@class\": \"org.smn.controlpad.model.ui.CPTextField\",\n      value: \"\"\n    }\n  }\n}; // Useful accessor methods for accessing key global state information fields.\n\nexport const getControl = (state, id) => state.controls[id]; // Uses the command pattern to update the application's global state via command objects dispatched by application UI controls.\n// The following code illustrates dispatching a state update command:\n//\n// const { state, dispatch } = useContext(AppContext);\n// const setMotorSpeed = (speed) => {\n//   dispatch({ id: props.id, fields: { speed: speed }, updateServer: false })\n// };\n//\n\nconst reducer = (state, command) => {\n  // Don't update the state if the command references an invalid control property\n  if (!(command.id in state.controls)) {\n    return state;\n  } // Update the control's state\n\n\n  const updatedControl = { ...state.controls[command.id],\n    ...command.fields\n  }; // Inform the controlPad server\n\n  if (command.updateServer) {\n    const message = {\n      control: {\n        id: command.id,\n        ...updatedControl\n      }\n    };\n    doServerDispatch(message);\n  } // Update the system state\n\n\n  let controlList = { ...state.controls\n  };\n  controlList[command.id] = updatedControl;\n  return { ...state,\n    controls: controlList\n  };\n}; // Create the application's global context providing access to both the application's state and command dispatch funtion.\n// UI components lower in the composition hierarchy can access the state data structure and/or dispatch function by including\n// the following code:  const { state, dispatch } = useContext(AppContext);\n//\n\n\nexport const AppContext = /*#__PURE__*/React.createContext();\nexport function AppContextProvider(props) {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, { ...initialState\n  });\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AppContextProvider, \"UzbrIsMm8HNmaZJbdB8gZpaQqdQ=\");\n\n_c = AppContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"names":["React","doServerDispatch","initialState","controls","stopMotors","label","m1","speed","forward","m2","m3","m4","m1RunningLight","value","m2RunningLight","m3RunningLight","m4RunningLight","toggle","toggleLight","slider","textEdit","textDisplay","multiTextEdit","multiTextDisplay","getControl","state","id","reducer","command","updatedControl","fields","updateServer","message","control","controlList","AppContext","createContext","AppContextProvider","props","dispatch","useReducer","children"],"sources":["C:/Users/steve/git/controlpad/src/State.jsx"],"sourcesContent":["import React from 'react';\r\nimport { doServerDispatch } from './websockets.js';\r\n\r\n// Initial values for the application's global state data structures.\r\nconst initialState = {\r\n\tcontrols: {\r\n\t\tstopMotors: { \"@class\":\"org.smn.controlpad.model.control.CPButton\", label: \"Stop Motors\" },\r\n\t\tm1: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", speed: 0, forward: true },\r\n\t\tm2: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", speed: 0, forward: true },\r\n\t\tm3: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", speed: 0, forward: true },\r\n\t\tm4: { \"@class\":\"org.smn.controlpad.model.control.CPMotor\", speed: 0, forward: true },\r\n\t\tm1RunningLight: { \"@class\":\"org.smn.controlpad.model.ui.CPLight\", value: 0},\r\n\t\tm2RunningLight: { \"@class\":\"org.smn.controlpad.model.ui.CPLight\", value: 0 },\r\n\t\tm3RunningLight: { \"@class\":\"org.smn.controlpad.model.ui.CPLight\", value: 0 },\r\n\t\tm4RunningLight: { \"@class\":\"org.smn.controlpad.model.ui.CPLight\", value: 0 },\r\n\t\ttoggle: { \"@class\":\"org.smn.controlpad.model.control.CPToggle\", value: 0 },\r\n\t\ttoggleLight: { \"@class\":\"org.smn.controlpad.model.ui.CPLight\", value: 0 },\r\n\t\tslider: { \"@class\":\"org.smn.controlpad.model.control.CPSlider\", value: 0 },\r\n\t\ttextEdit: { \"@class\":\"org.smn.controlpad.model.ui.CPTextField\", value: \"Steve Nies\" },\r\n\t\ttextDisplay: { \"@class\":\"org.smn.controlpad.model.ui.CPTextField\", value: \"\" },\r\n\t\tmultiTextEdit: { \"@class\":\"org.smn.controlpad.model.ui.CPTextField\", value: \"Steve Nies, Sheri Nies\" },\r\n\t\tmultiTextDisplay: { \"@class\":\"org.smn.controlpad.model.ui.CPTextField\", value: \"\" }\r\n\t}\r\n};\r\n\r\n// Useful accessor methods for accessing key global state information fields.\r\nexport const getControl = (state, id) => state.controls[id];\r\n\r\n// Uses the command pattern to update the application's global state via command objects dispatched by application UI controls.\r\n// The following code illustrates dispatching a state update command:\r\n//\r\n// const { state, dispatch } = useContext(AppContext);\r\n// const setMotorSpeed = (speed) => {\r\n//   dispatch({ id: props.id, fields: { speed: speed }, updateServer: false })\r\n// };\r\n//\r\nconst reducer = (state, command) => {\r\n\t\r\n\t// Don't update the state if the command references an invalid control property\r\n\tif (!(command.id in state.controls)) {\r\n\t\treturn state;\r\n\t}\r\n\t\t\t\r\n\t// Update the control's state\r\n\tconst updatedControl = { ...state.controls[command.id], ...command.fields };\r\n\t\r\n\t// Inform the controlPad server\r\n\tif (command.updateServer) {\r\n\t\tconst message = { control: { id: command.id, ...updatedControl } };\r\n\t\tdoServerDispatch(message);\r\n\t}\r\n\t\r\n\t// Update the system state\r\n\tlet controlList = { ...state.controls };\r\n\tcontrolList[command.id] = updatedControl;\r\n\treturn { ...state, controls: controlList }\r\n};\r\n\r\n// Create the application's global context providing access to both the application's state and command dispatch funtion.\r\n// UI components lower in the composition hierarchy can access the state data structure and/or dispatch function by including\r\n// the following code:  const { state, dispatch } = useContext(AppContext);\r\n//\r\nexport const AppContext = React.createContext();\r\nexport function AppContextProvider(props) {\r\n\r\n\tconst [state, dispatch] = React.useReducer(reducer, {...initialState});\r\n\tconst value = { state, dispatch };\r\n\r\n\treturn (\r\n\t\t<AppContext.Provider value={value}>\r\n\t\t\t{props.children}\r\n\t\t</AppContext.Provider>\r\n\t);\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}